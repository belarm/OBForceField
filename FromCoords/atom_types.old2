#include <glm/glm.hpp>
#include <glm/vec3.hpp>
#include <glm/vec4.hpp>
#include <glm/mat4x4.hpp>
#include <glm/gtx/transform.hpp>
#include <string.h>
#include <string>
#include <iomanip>

#define _res(C,X) std::pair<char,Residue>((C),Residue((C),(X)))

using namespace glm;
using namespace std;

class Residue {
public:
	dmat4 Transforms[3] = {dmat4(),dmat4(),dmat4()};
	Residue() {}
	Residue(char rcode, vector<Atom> _atoms) {
		code = rcode;
		atoms = _atoms;
		for_each(atoms.begin(),atoms.end(),[&](Atom a) {_lookup_atom.insert(pair<string,Atom *>(a.Type(),&a));});
	}
	
	bool Set(char rcode,vector<Atom> _atoms) {
		code = rcode;
		atoms = _atoms;
		for_each(atoms.begin(),atoms.end(),[&](Atom a) {_lookup_atom.insert(pair<string,Atom *>(a.Type(),&a));});
		return true;
	}
	
	void apply_transform(dmat4 transform, int offset = 0) {
		cout << "Applying " << to_string(transform) << endl;
		for(int i = offset;i<3;i++) {
//			cout << to_string(Transforms[i]) << endl;
			Transforms[i] = Transforms[i] * transform;
//			cout << to_string(Transforms[i]) << endl;
			cout << "------\n";
		}
	}
	
	dvec3 Pos() { return atoms.begin()->Pos();} //Residue pos = first N
	char Code() { return code;}
	string Lbl() { return CtoCode[code]; };
	
	void MakeCIF(string filename) {
		ofstream ofs = ofstream(filename);
		ofs << "data_" << Lbl() << endl;
		ofs << "#" << endl;
		ofs << "loop_\n";
		ofs << "_chem_comp_atom.comp_id\n";
		ofs << "_chem_comp_atom.atom_id\n";
		ofs << "_chem_comp_atom.type_symbol\n";
		ofs << "_chem_comp_atom.model_Cartn_x\n";
		ofs << "_chem_comp_atom.model_Cartn_y\n";
		ofs << "_chem_comp_atom.model_Cartn_z\n";

		for(auto a : atoms) {
			dvec3 pos = a.Pos();
			cout << "ATOM POSITION " << to_string(pos) << endl;
			ofs << Lbl() << " ";
			ofs.width(4);
			ofs << left << a.Lbl() << " ";
			ofs << a.element() << " ";
			ofs << pos.x << " ";
			ofs << pos.y << " ";
			ofs << pos.z << endl;
		}
		ofs.close();
	}

private:
	char code;
	vector<Atom> atoms;
	map<string,Atom*> _lookup_atom;
	Atom* _get_atom_by_code(string code) {
		return _lookup_atom[code];
	}
	Residue *next;
};






std::map<char,string> CtoCode = map<char,string>(
{
	pair<char,string>('A', "ALA"),
	pair<char,string>('B', "ASX"),
	pair<char,string>('C', "CYS"),
	pair<char,string>('D', "ASP"),
	pair<char,string>('E', "GLU"),
	pair<char,string>('F', "PHE"),
	pair<char,string>('G', "GLY"),
	pair<char,string>('H', "HIS"),
	pair<char,string>('I', "ILE"),
	pair<char,string>('J', "XLE"),
	pair<char,string>('K', "LYS"),
	pair<char,string>('L', "LEU"),
	pair<char,string>('M', "MET"),
	pair<char,string>('N', "ASN"),
	pair<char,string>('O', "PYL"),
	pair<char,string>('P', "PRO"),
	pair<char,string>('Q', "GLN"),
	pair<char,string>('R', "ARG"),
	pair<char,string>('S', "SER"),
	pair<char,string>('T', "THR"),
	pair<char,string>('U', "SEC"),
	pair<char,string>('V', "VAL"),
	pair<char,string>('W', "TRP"),
	pair<char,string>('Y', "TRY"),
	pair<char,string>('Z', "GLX")
}
);

class Atom {
public:
	
	Residue *Parent;
	dmat4 *Transform;

	Atom() {}

	Atom(string _type) {
		atype = _type;
		pos = dvec3(0,0,0);
	}

	Atom(string _type,dvec3 _pos) {
//		transform = 1;
		atype = _type;
		pos = _pos;
	}

	Atom(string _type, double x, double y, double z) {
//		cout << _type << endl;
		atype = _type;
//		transform = _t;
		pos = dvec3(x,y,z);
	}

	Atom(string _type, double x, double y, double z, Residue *_parent, dmat4 *_transform) {
		Parent = _parent;
		Transform = _transform;
//		cout << _type << endl;
		atype = _type;
//		transform = _t;
		pos = dvec3(x,y,z);
	}

	const string Type() { return atype; };
	
	string Lbl() {
		return atype;
	}
//	double X() { return pos.x; }
//	double Y() { return pos.y; }
//	double Z() { return pos.z; }
	
	string element() {
		if(atype.length() > 1 && atype[0] == 'S' && atype[1] == 'E')
			return "SE";
		return atype.substr(0,1);
	}
	static dvec3 getPos(const Atom &a) {
		return a.pos;
	}
	dvec3 Pos() {
		if(Parent == nullptr)
			return pos;
		dmat4 trans();
		cout << to_string(*Transform) << endl;
		return dvec3(*Transform * dvec4(pos,1));
	}

private:
	string atype;
	dvec3 pos;
};


typedef std::pair<char,Residue> rpair;


class ResidueDB {
private:
	std::map<char,Residue> _db;

	Residue load_from_CIF(char code, string file) {
		string name = CtoCode[code];
		string filename = "/home/belarm/source/ideal_ligands/" + file + ".cif";
		ifstream cif = ifstream(filename);
		if(!cif)
			cout << "FAILED" << endl;
		string line("");
		while(line.substr(0,28) != "_chem_comp_atom.pdbx_ordinal") {
			getline(cif,line);
		}
	//	getline(cif,line);
		string buf;
		string label;
		double x,y,z;
//		char element;
		vector<Atom> atoms;
		Atom cur;
		Residue ret;
		//Move alpha Carbon up by 2 angstroms
//		ret.Transforms[1] = glm::translate(ret.Transforms[1],dvec3(0,2,0));
		
		
		
		while(cif.peek() != '#') {
	//		getline(cif,line);
	//		cout << line;
			cif.ignore(4);
			cif >> label;
			cif >> buf;
			cif >> buf;
			cif >> buf;
			cif >> buf;
			cif >> buf;
			cif >> buf;
			cif >> buf;
			cif >> buf;
			cif >> buf;
			cif >> buf;
			cif >> x;
			cif >> y;
			cif >> z;
			if(label != "HXT" && label != "OXT" && label != "H2") {
	//			cur = Atom(label,x,y,z);
				if(label == "H" || label == "N")
					cur = Atom(label,x,y,z,&ret,&ret.Transforms[0]);
				else if (label == "C" || label == "O")
					cur = Atom(label,x,y,z,&ret,&ret.Transforms[2]);
				else 
					cur = Atom(label,x,y,z,&ret,&ret.Transforms[1]);
				atoms.push_back(cur);
			}
			getline(cif,buf);
		}
		return Residue(code,atoms);
	}


public:
	string Desc(Residue r) {
		return CtoCode[r.Code()] + " @ " + to_string(r.Pos());
	}
	ResidueDB() {
		_db.insert(rpair('A',load_from_CIF('A',"ALA")));
		_db.insert(rpair('B',load_from_CIF('B',"ASX")));
		_db.insert(rpair('C',load_from_CIF('C',"CYS")));
		_db.insert(rpair('D',load_from_CIF('D',"ASP")));
		_db.insert(rpair('E',load_from_CIF('E',"GLU")));
		_db.insert(rpair('F',load_from_CIF('F',"PHE")));
		_db.insert(rpair('G',load_from_CIF('G',"GLY")));
		_db.insert(rpair('H',load_from_CIF('H',"HIS")));
		_db.insert(rpair('I',load_from_CIF('I',"ILE")));
		_db.insert(rpair('K',load_from_CIF('K',"LYS")));
		_db.insert(rpair('L',load_from_CIF('L',"LEU")));
		_db.insert(rpair('M',load_from_CIF('M',"MET")));
		_db.insert(rpair('N',load_from_CIF('N',"ASN")));
		_db.insert(rpair('O',load_from_CIF('O',"PYL")));
		_db.insert(rpair('P',load_from_CIF('P',"PRO")));
		_db.insert(rpair('Q',load_from_CIF('Q',"GLN")));
		_db.insert(rpair('R',load_from_CIF('R',"ARG")));
		_db.insert(rpair('S',load_from_CIF('S',"SER")));
		_db.insert(rpair('T',load_from_CIF('T',"THR")));
		_db.insert(rpair('U',load_from_CIF('U',"SEC")));
		_db.insert(rpair('V',load_from_CIF('V',"VAL")));
		_db.insert(rpair('W',load_from_CIF('W',"TRP")));
		_db.insert(rpair('Y',load_from_CIF('Y',"TRY")));
		_db.insert(rpair('Z',load_from_CIF('Z',"GLX")));
	}
	Residue GetRes(char r) {
		return _db[r];
	}
	
	
	
	
	
};
//static ResidueDB RDB;